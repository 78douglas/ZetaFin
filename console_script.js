// Script para executar no console do navegador para investigar o problema das categorias

console.log('üîç INVESTIGA√á√ÉO PROFUNDA - Problema das Categorias');
console.log('================================================');

// 1. Verificar dados no localStorage
console.log('\nüì¶ 1. DADOS NO LOCALSTORAGE:');
const transacoes = localStorage.getItem('zetafin_transactions');
const categorias = localStorage.getItem('zetafin_categories');

console.log('Transa√ß√µes raw:', transacoes);
console.log('Categorias raw:', categorias);

if (transacoes) {
  const transacoesParsed = JSON.parse(transacoes);
  console.log('\nüí∞ TRANSA√á√ïES DETALHADAS:');
  transacoesParsed.forEach((t, index) => {
    console.log(`Transa√ß√£o ${index + 1}:`, {
      id: t.id,
      descricao: t.descricao,
      valor: t.valor,
      tipo: t.tipo,
      categoria_id: t.categoria_id,
      categoria_id_type: typeof t.categoria_id,
      data: t.data
    });
  });
}

if (categorias) {
  const categoriasParsed = JSON.parse(categorias);
  console.log('\nüè∑Ô∏è CATEGORIAS DETALHADAS:');
  categoriasParsed.forEach((c, index) => {
    console.log(`Categoria ${index + 1}:`, {
      id: c.id,
      id_type: typeof c.id,
      nome: c.nome,
      tipo_padrao: c.tipo_padrao,
      icone: c.icone,
      ativa: c.ativa
    });
  });
}

// 2. Testar fun√ß√£o obterCategoria
console.log('\nüîß 2. TESTE DA FUN√á√ÉO obterCategoria:');
if (window.React && categorias) {
  const categoriasParsed = JSON.parse(categorias);
  
  // Simular a fun√ß√£o obterCategoria
  const obterCategoria = (id) => {
    console.log(`Buscando categoria com ID: "${id}" (tipo: ${typeof id})`);
    const categoria = categoriasParsed.find(cat => cat.id === id);
    console.log('Categoria encontrada:', categoria);
    return categoria;
  };
  
  // Testar com diferentes tipos de ID
  if (transacoes) {
    const transacoesParsed = JSON.parse(transacoes);
    transacoesParsed.forEach((t, index) => {
      console.log(`\nTeste ${index + 1} - Transa√ß√£o: ${t.descricao}`);
      console.log(`categoria_id: "${t.categoria_id}" (${typeof t.categoria_id})`);
      
      // Teste direto
      const resultado1 = obterCategoria(t.categoria_id);
      
      // Teste convertendo para string
      const resultado2 = obterCategoria(String(t.categoria_id));
      
      // Teste convertendo para number
      const resultado3 = obterCategoria(Number(t.categoria_id));
      
      console.log('Resultados:', {
        direto: resultado1?.nome || 'N√ÉO ENCONTRADO',
        string: resultado2?.nome || 'N√ÉO ENCONTRADO', 
        number: resultado3?.nome || 'N√ÉO ENCONTRADO'
      });
    });
  }
}

// 3. Verificar mapeamento atual
console.log('\nüó∫Ô∏è 3. MAPEAMENTO CATEGORIA_ID ‚Üí CATEGORIA:');
if (transacoes && categorias) {
  const transacoesParsed = JSON.parse(transacoes);
  const categoriasParsed = JSON.parse(categorias);
  
  console.log('IDs das categorias dispon√≠veis:', categoriasParsed.map(c => `"${c.id}" (${typeof c.id})`));
  console.log('IDs usados nas transa√ß√µes:', transacoesParsed.map(t => `"${t.categoria_id}" (${typeof t.categoria_id})`));
  
  // Verificar correspond√™ncias
  transacoesParsed.forEach(transacao => {
    const categoriaEncontrada = categoriasParsed.find(cat => cat.id === transacao.categoria_id);
    console.log(`Transa√ß√£o "${transacao.descricao}":`, {
      categoria_id_usado: transacao.categoria_id,
      categoria_encontrada: categoriaEncontrada ? categoriaEncontrada.nome : '‚ùå N√ÉO ENCONTRADA',
      problema: !categoriaEncontrada ? 'CATEGORIA N√ÉO EXISTE OU ID INCOMPAT√çVEL' : '‚úÖ OK'
    });
  });
}

console.log('\nüéØ 4. DIAGN√ìSTICO FINAL:');
console.log('Execute este script e analise os resultados para identificar o problema exato.');